{"ast":null,"code":"var _jsxFileName = \"/Users/lucasleroy/Desktop/PROJET WEB/FRONT_PROJET_WEB_IG3/src/App.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\nimport axios from 'axios';\nimport { UidContext } from './components/AppContext';\nimport Routes from './components/Routes';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst App = () => {\n  _s();\n  const [uid, setUid] = useState(null);\n  useEffect(() => {\n    const fetchToken = async () => {\n      // \"fetchToken\" au lieu de \"fectToken\"\n      try {\n        // Utilisation de \"try-catch\" pour gérer les erreurs\n        const res = await axios.get(`${process.env.REACT_APP_API_URL}jwtid`, {\n          withCredentials: true\n        });\n        console.log(res);\n        setUid(res.data);\n      } catch (err) {\n        // Affichage d'un message d'erreur en cas d'échec de la requête\n        console.log('No token');\n      }\n    };\n    fetchToken();\n  }, [uid]); // Ajout des crochets vides pour éviter une boucle infinie ; a chaque fois que on a uid on relande useEffect\n\n  return /*#__PURE__*/_jsxDEV(UidContext.Provider, {\n    value: uid,\n    children: /*#__PURE__*/_jsxDEV(Routes, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 24,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 23,\n    columnNumber: 5\n  }, this);\n};\n_s(App, \"6AQDjhy1IX6JQErF13hg073z7kA=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useEffect","useState","axios","UidContext","Routes","jsxDEV","_jsxDEV","App","_s","uid","setUid","fetchToken","res","get","process","env","REACT_APP_API_URL","withCredentials","console","log","data","err","Provider","value","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/lucasleroy/Desktop/PROJET WEB/FRONT_PROJET_WEB_IG3/src/App.js"],"sourcesContent":["import React, { useEffect, useState } from 'react';\nimport axios from 'axios'; \nimport { UidContext } from './components/AppContext';\nimport Routes from './components/Routes';\n\nconst App = () => {\n  const [uid, setUid] = useState(null);\n\n  useEffect(() => { \n    const fetchToken = async () => { // \"fetchToken\" au lieu de \"fectToken\"\n      try { // Utilisation de \"try-catch\" pour gérer les erreurs\n        const res = await axios.get(`${process.env.REACT_APP_API_URL}jwtid`, { withCredentials: true }); \n        console.log(res);\n        setUid(res.data);\n      } catch (err) { // Affichage d'un message d'erreur en cas d'échec de la requête\n        console.log('No token');\n      }\n    };\n    fetchToken();\n  }, [uid]); // Ajout des crochets vides pour éviter une boucle infinie ; a chaque fois que on a uid on relande useEffect\n\n  return (\n    <UidContext.Provider value={uid}>\n      <Routes />\n    </UidContext.Provider>\n  );\n};\n\nexport default App;\n\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAClD,OAAOC,KAAK,MAAM,OAAO;AACzB,SAASC,UAAU,QAAQ,yBAAyB;AACpD,OAAOC,MAAM,MAAM,qBAAqB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEzC,MAAMC,GAAG,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAChB,MAAM,CAACC,GAAG,EAAEC,MAAM,CAAC,GAAGT,QAAQ,CAAC,IAAI,CAAC;EAEpCD,SAAS,CAAC,MAAM;IACd,MAAMW,UAAU,GAAG,MAAAA,CAAA,KAAY;MAAE;MAC/B,IAAI;QAAE;QACJ,MAAMC,GAAG,GAAG,MAAMV,KAAK,CAACW,GAAG,CAAE,GAAEC,OAAO,CAACC,GAAG,CAACC,iBAAkB,OAAM,EAAE;UAAEC,eAAe,EAAE;QAAK,CAAC,CAAC;QAC/FC,OAAO,CAACC,GAAG,CAACP,GAAG,CAAC;QAChBF,MAAM,CAACE,GAAG,CAACQ,IAAI,CAAC;MAClB,CAAC,CAAC,OAAOC,GAAG,EAAE;QAAE;QACdH,OAAO,CAACC,GAAG,CAAC,UAAU,CAAC;MACzB;IACF,CAAC;IACDR,UAAU,CAAC,CAAC;EACd,CAAC,EAAE,CAACF,GAAG,CAAC,CAAC,CAAC,CAAC;;EAEX,oBACEH,OAAA,CAACH,UAAU,CAACmB,QAAQ;IAACC,KAAK,EAAEd,GAAI;IAAAe,QAAA,eAC9BlB,OAAA,CAACF,MAAM;MAAAqB,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACS,CAAC;AAE1B,CAAC;AAACpB,EAAA,CArBID,GAAG;AAAAsB,EAAA,GAAHtB,GAAG;AAuBT,eAAeA,GAAG;AAAC,IAAAsB,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}